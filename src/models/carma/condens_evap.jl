using Unitful
using Unitful: R

@derived_dimension MassDiffusivity ùêã^2*ùêì^-1 true

function Kn(D::MassDiffusivity, r::Length, M::Mass, T::Temperature)
    return (3 * D / r) * sqrt(œÄ * M / (8 * R * T))
end

function Kn‚Çú(D, r::Length, M::Mass, T::Temperature, Œ∫, C‚Çö, Œº, œÅ)
    return Kn(D, r, M, T) * Œ∫ / (r * D * œÅ * (C‚Çö - R / (2 * Œº)))
end

function D_condensate(D, r::Length, M::Mass, T::Temperature, Œ∫, C‚Çö, Œº, œÅ) # D' from Gao 2018 (A18); alphas force-set to 1
    Kn_val = Kn(D, r, M, T)
    Œª = (1.33 * Kn_val + 0.71) / (Kn_val + 1)
    return D / (1 + Œª * Kn_val)
end

function Œ∫_condensate(D::MassDiffusivity, r::Length, M::Mass, T::Temperature, Œ∫, C‚Çö, Œº, œÅ) # Œ∫‚Çê' from Gao 2018 (A19)
    Kn‚Çú_val = Kn‚Çú(D, r, M, T, Œ∫, c‚Çö, Œº, œÅ)
    Œª‚Çú = (1.33 * Kn‚Çú_val + 0.71) / (Kn‚Çú_val + 1)
    return Œ∫ / (1 + Œª‚Çú * Kn‚Çú_val)
end

function dmp_dt(molecule::Molecule, D, r, M, T, Œ∫, C‚Çö, Œº, œÅ, S) # Jacobson 16.13 but with the numerator of Gao 2018 (A16)
    Dp = D_condensate(D, r, M, T, Œ∫, C‚Çö, Œº, œÅ)
    Ak = exp(2 * M * œÉ‚Çõ / (œÅ‚Çö * R * T * r))
    Œ∫‚Çê = Œ∫_condensate(D, r, M, T, Œ∫, C‚Çö, Œº, œÅ)
    num = 4œÄ * r * Dp * p‚Çõ * (S - Ak)
    denom = ((Dp * L * p‚Çõ * Ak) / (Œ∫‚Çê * T)) * (L * m / (R * T) - 1) + R * T / m
    return num / denom
end